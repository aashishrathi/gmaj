// Code generated by protoc-gen-go.
// source: gmaj.proto
// DO NOT EDIT!

/*
Package gmaj is a generated protocol buffer package.

It is generated from these files:
	gmaj.proto

It has these top-level messages:
	RemoteNode
	TransferMsg
	MT
	KeyVal
	ID
	Key
	Val
*/
package gmaj

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type RemoteNode struct {
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *RemoteNode) Reset()         { *m = RemoteNode{} }
func (m *RemoteNode) String() string { return proto.CompactTextString(m) }
func (*RemoteNode) ProtoMessage()    {}

type TransferMsg struct {
	FromID []byte      `protobuf:"bytes,1,opt,name=fromID,proto3" json:"fromID,omitempty"`
	ToNode *RemoteNode `protobuf:"bytes,2,opt,name=toNode" json:"toNode,omitempty"`
}

func (m *TransferMsg) Reset()         { *m = TransferMsg{} }
func (m *TransferMsg) String() string { return proto.CompactTextString(m) }
func (*TransferMsg) ProtoMessage()    {}

func (m *TransferMsg) GetToNode() *RemoteNode {
	if m != nil {
		return m.ToNode
	}
	return nil
}

type MT struct {
}

func (m *MT) Reset()         { *m = MT{} }
func (m *MT) String() string { return proto.CompactTextString(m) }
func (*MT) ProtoMessage()    {}

type KeyVal struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
}

func (m *KeyVal) Reset()         { *m = KeyVal{} }
func (m *KeyVal) String() string { return proto.CompactTextString(m) }
func (*KeyVal) ProtoMessage()    {}

type ID struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}

type Key struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}

type Val struct {
	Val string `protobuf:"bytes,1,opt,name=val" json:"val,omitempty"`
}

func (m *Val) Reset()         { *m = Val{} }
func (m *Val) String() string { return proto.CompactTextString(m) }
func (*Val) ProtoMessage()    {}

func init() {
}

// Client API for Node service

type NodeClient interface {
	GetPredecessor(ctx context.Context, in *MT, opts ...grpc.CallOption) (*RemoteNode, error)
	GetSuccessor(ctx context.Context, in *MT, opts ...grpc.CallOption) (*RemoteNode, error)
	SetPredecessor(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error)
	SetSuccessor(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error)
	Notify(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error)
	ClosestPrecedingFinger(ctx context.Context, in *ID, opts ...grpc.CallOption) (*RemoteNode, error)
	FindSuccessor(ctx context.Context, in *ID, opts ...grpc.CallOption) (*RemoteNode, error)
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error)
	Put(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*MT, error)
	TransferKeys(ctx context.Context, in *TransferMsg, opts ...grpc.CallOption) (*MT, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) GetPredecessor(ctx context.Context, in *MT, opts ...grpc.CallOption) (*RemoteNode, error) {
	out := new(RemoteNode)
	err := grpc.Invoke(ctx, "/gmaj.Node/GetPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) GetSuccessor(ctx context.Context, in *MT, opts ...grpc.CallOption) (*RemoteNode, error) {
	out := new(RemoteNode)
	err := grpc.Invoke(ctx, "/gmaj.Node/GetSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetPredecessor(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.Node/SetPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) SetSuccessor(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.Node/SetSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Notify(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.Node/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) ClosestPrecedingFinger(ctx context.Context, in *ID, opts ...grpc.CallOption) (*RemoteNode, error) {
	out := new(RemoteNode)
	err := grpc.Invoke(ctx, "/gmaj.Node/ClosestPrecedingFinger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FindSuccessor(ctx context.Context, in *ID, opts ...grpc.CallOption) (*RemoteNode, error) {
	out := new(RemoteNode)
	err := grpc.Invoke(ctx, "/gmaj.Node/FindSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error) {
	out := new(Val)
	err := grpc.Invoke(ctx, "/gmaj.Node/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Put(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.Node/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) TransferKeys(ctx context.Context, in *TransferMsg, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.Node/TransferKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	GetPredecessor(context.Context, *MT) (*RemoteNode, error)
	GetSuccessor(context.Context, *MT) (*RemoteNode, error)
	SetPredecessor(context.Context, *RemoteNode) (*MT, error)
	SetSuccessor(context.Context, *RemoteNode) (*MT, error)
	Notify(context.Context, *RemoteNode) (*MT, error)
	ClosestPrecedingFinger(context.Context, *ID) (*RemoteNode, error)
	FindSuccessor(context.Context, *ID) (*RemoteNode, error)
	Get(context.Context, *Key) (*Val, error)
	Put(context.Context, *KeyVal) (*MT, error)
	TransferKeys(context.Context, *TransferMsg) (*MT, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_GetPredecessor_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(MT)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).GetPredecessor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_GetSuccessor_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(MT)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).GetSuccessor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_SetPredecessor_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RemoteNode)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).SetPredecessor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_SetSuccessor_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RemoteNode)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).SetSuccessor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_Notify_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RemoteNode)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).Notify(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_ClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ID)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).ClosestPrecedingFinger(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_FindSuccessor_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ID)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).FindSuccessor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_Get_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Key)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_Put_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(KeyVal)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).Put(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Node_TransferKeys_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(TransferMsg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeServer).TransferKeys(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmaj.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPredecessor",
			Handler:    _Node_GetPredecessor_Handler,
		},
		{
			MethodName: "GetSuccessor",
			Handler:    _Node_GetSuccessor_Handler,
		},
		{
			MethodName: "SetPredecessor",
			Handler:    _Node_SetPredecessor_Handler,
		},
		{
			MethodName: "SetSuccessor",
			Handler:    _Node_SetSuccessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Node_Notify_Handler,
		},
		{
			MethodName: "ClosestPrecedingFinger",
			Handler:    _Node_ClosestPrecedingFinger_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Node_FindSuccessor_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Node_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _Node_Put_Handler,
		},
		{
			MethodName: "TransferKeys",
			Handler:    _Node_TransferKeys_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for NodeAPI service

type NodeAPIClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error)
	Put(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*MT, error)
}

type nodeAPIClient struct {
	cc *grpc.ClientConn
}

func NewNodeAPIClient(cc *grpc.ClientConn) NodeAPIClient {
	return &nodeAPIClient{cc}
}

func (c *nodeAPIClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Val, error) {
	out := new(Val)
	err := grpc.Invoke(ctx, "/gmaj.NodeAPI/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeAPIClient) Put(ctx context.Context, in *KeyVal, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.NodeAPI/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NodeAPI service

type NodeAPIServer interface {
	Get(context.Context, *Key) (*Val, error)
	Put(context.Context, *KeyVal) (*MT, error)
}

func RegisterNodeAPIServer(s *grpc.Server, srv NodeAPIServer) {
	s.RegisterService(&_NodeAPI_serviceDesc, srv)
}

func _NodeAPI_Get_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Key)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeAPIServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _NodeAPI_Put_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(KeyVal)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(NodeAPIServer).Put(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _NodeAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmaj.NodeAPI",
	HandlerType: (*NodeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NodeAPI_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _NodeAPI_Put_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for MembershipServer service

type MembershipServerClient interface {
	AddNode(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error)
	DelNode(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error)
	GetNode(ctx context.Context, in *MT, opts ...grpc.CallOption) (*RemoteNode, error)
}

type membershipServerClient struct {
	cc *grpc.ClientConn
}

func NewMembershipServerClient(cc *grpc.ClientConn) MembershipServerClient {
	return &membershipServerClient{cc}
}

func (c *membershipServerClient) AddNode(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.MembershipServer/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipServerClient) DelNode(ctx context.Context, in *RemoteNode, opts ...grpc.CallOption) (*MT, error) {
	out := new(MT)
	err := grpc.Invoke(ctx, "/gmaj.MembershipServer/DelNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membershipServerClient) GetNode(ctx context.Context, in *MT, opts ...grpc.CallOption) (*RemoteNode, error) {
	out := new(RemoteNode)
	err := grpc.Invoke(ctx, "/gmaj.MembershipServer/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MembershipServer service

type MembershipServerServer interface {
	AddNode(context.Context, *RemoteNode) (*MT, error)
	DelNode(context.Context, *RemoteNode) (*MT, error)
	GetNode(context.Context, *MT) (*RemoteNode, error)
}

func RegisterMembershipServerServer(s *grpc.Server, srv MembershipServerServer) {
	s.RegisterService(&_MembershipServer_serviceDesc, srv)
}

func _MembershipServer_AddNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RemoteNode)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MembershipServerServer).AddNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MembershipServer_DelNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RemoteNode)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MembershipServerServer).DelNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _MembershipServer_GetNode_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(MT)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MembershipServerServer).GetNode(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MembershipServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmaj.MembershipServer",
	HandlerType: (*MembershipServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _MembershipServer_AddNode_Handler,
		},
		{
			MethodName: "DelNode",
			Handler:    _MembershipServer_DelNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _MembershipServer_GetNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
