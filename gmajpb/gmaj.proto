// compile with:
//
//   protoc *.proto --go_out=plugins=grpc:.

syntax = "proto3";

package gmajpb;

// Chord is the service for inter-node communication.
// This has all the RPC functions needed to maintain
// a Chord cluster.
service Chord {
    // GetPredecessor returns the node believed to be the current predecessor.
    rpc GetPredecessor(MT) returns (Node);
    // GetSuccessor returns the node believed to be the current successor.
    rpc GetSuccessor(MT) returns (Node);
    // SetPredecessor sets Node as the predeccessor. This function does not do
    // any validation.
    rpc SetPredecessor(Node) returns (MT);
    // SetPredecessor sets Node as the successor. This function does not do any
    // validation.
    rpc SetSuccessor(Node) returns (MT);
    // Notify notifies Chord that Node thinks it is our predecessor. This has
    // the potential to initiate the transferring of keys.
    rpc Notify(Node) returns (MT);
    // ClosestPrecedingFinger returns the entry of the finger table that
    // precedes ID but is closest to it.
    rpc ClosestPrecedingFinger(ID) returns (Node);
    // FindSuccessor finds the node the succedes ID. May initiate RPC calls to
    // other nodes.
    rpc FindSuccessor(ID) returns (Node);
    // Get returns the value in Chord ring for the given key.
    rpc Get(Key) returns (Val);
    // Put writes a key value pair to the Chord ring.
    rpc Put(KeyVal) returns (MT);
    // TransferKeys tells a node to transfer keys in a specified range to
    // another node.
    rpc TransferKeys(TransferKeysReq) returns (MT);
}

// Node contains a node ID and address.
message Node {
    bytes id = 1;
    string addr = 2;
}

message TransferKeysReq {
    bytes from_id = 1;
    Node to_node = 2;
}

message MT {}

message KeyVal {
    string key = 1;
    string val = 2;
}

message ID {
    bytes id = 1;
}

message Key {
    string key = 1;
}

message Val {
    string val = 1;
}
